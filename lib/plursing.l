
(symbols 'plursing 'pico)

(de pluralize (S)
  ( cond
    ((= '(q u i z) S) '(q u i z z e s))
    ((= '(m a t r i x) S) '(m a t r i c e s))
    ((= '(v e r t e x) S) '(v e r t i c e s))
    ((= '(i n d e x) S) '(i n d i c e s))
    ((= '(x) (tail 1 S)) (append S '(e s )))
    ((and (member (car S) '(l m)) (= '(o u s e) (tail 4 S))) (list (car S) '(i c e)))
    ((member (tail 2 S) '((c h) (s h))) (append S '(e s)))
    ((member S '((s h e a f) (l e a f) (l o a f) (t h i e f))) (append (head -1 S) '(v e s)))
    ((= '(s i s) (tail 3 S)) (append (head -2 S) '(e s)))
    ((member S '((t o m a t o) (p o t a t o) (h e r o) (e c h o) (v e t o)) (append S '(e s))))
    ((= '(a x i s) S) '(a x e s))
    ((= '(t e s t i s) S) '(t e s t e s))
    ((= (tail 1 S) '(s)) (append S '(e s))) 
    (T (append S '(s)))
  )
)

(de singularize (s)
)

(when *Dbg
  ~(assert (= "quizzes" (pack(pluralize (chop "quiz")))))
  ~(assert (= "matrices" (pack(pluralize (chop "matrix")))))
  ~(assert (= "vertices" (pack(pluralize (chop "vertex")))))
  ~(assert (= "indices" (pack(pluralize (chop "index")))))
  ~(assert (= "foxes" (pack(pluralize (chop "fox")))))
  ~(assert (= "saxes" (pack(pluralize (chop "sax")))))
  ~(assert (= "mice" (pack(pluralize (chop "mouse")))))
  ~(assert (= "houses" (pack(pluralize (chop "house")))))
  ~(assert (= "marshes" (pack(pluralize (chop "marsh")))))
  ~(assert (= "trusses" (pack(pluralize (chop "truss")))))
  ~(assert (= "arches" (pack(pluralize (chop "arch")))))
  ~(assert (= "sheaves" (pack(pluralize (chop "sheaf")))))
  ~(assert (= "leaves" (pack(pluralize (chop "leaf")))))
  ~(assert (= "loaves" (pack(pluralize (chop "loaf")))))
  ~(assert (= "thieves" (pack(pluralize (chop "thief")))))
  ~(assert (= "hypotheses" (pack(pluralize (chop "hypothesis")))))
  ~(assert (= "potatoes" (pack(pluralize (chop "potato")))))

)
